import asyncio, logging
import random  # Ajout pour choice quotes
from datetime import date, timedelta  # Pour paid_until si monet

from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
import aiocron

from handlers import onboarding_router, main_router, counter_router, replies_router, posts_router, settings_router  # Ajoute posts/settings
from config import TOKEN, MILESTONES, SUPER_GROUP, TOPICS
from database.database import async_session
from database.user import User

from handlers.milestones import milestone_router, milestone_kb  
from sqlalchemy import select, func
from database.milestone_like import MilestoneLike            
from aiogram import F                                           

from handlers.pay import pay_router

from aiogram.types import BotCommand, BotCommandScopeDefault  # new import

from aiohttp import web

DEFAULT_COMMANDS = [
    BotCommand(command="start",    description="üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand(command="sos",      description="üÜò –ù–∞–ø–∏—Å–∞—Ç—å SOS"),
    BotCommand(command="win",      description="üèÜ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è WIN"),
    BotCommand(command="counter",  description="üìä –ú–æ–π —Å—á—ë—Ç—á–∏–∫"),
    BotCommand(command="posts",    description="üóë –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"),
    BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
]

async def set_bot_commands(bot: Bot) -> None:
    await bot.set_my_commands(DEFAULT_COMMANDS, BotCommandScopeDefault())

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())
dp.include_router(onboarding_router)
dp.include_router(main_router)
dp.include_router(replies_router)
dp.include_router(milestone_router)
dp.include_router(counter_router)
dp.include_router(posts_router)  # Nouveau
dp.include_router(settings_router)  # Nouveau
dp.include_router(pay_router)

QUOTES = [
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ —Ç—Ä–∞–≤—ã - –ø–æ–±–µ–¥–∞! üèÜ",
    "–ü—Ä–æ–¥–æ–ª–∂–∞–π, —Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üåü",
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –≤ config.yml
]

# ‚îÄ‚îÄ‚îÄ CRON : checkpoints sobriety
@aiocron.crontab("30 0 * * *")
async def sobriety_check():
    async with async_session() as ses:
        users = (await ses.execute(select(User))).scalars().all()
        for u in users:
            if not u.quit_date:
                continue
            days = (date.today() - u.quit_date).days
            next_ms = next((m for m in MILESTONES if m > u.last_checkpoint), None)
            if next_ms and days >= next_ms:
                await bot.send_message(u.telegram_id,
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –°–µ–≥–æ–¥–Ω—è {next_ms} –¥–Ω–µ–π –±–µ–∑ —Ç—Ä–∞–≤—ã.")
                sent = await bot.send_message(
                    SUPER_GROUP, TOPICS["wins"],
                    f"ü•≥ {u.avatar_emoji} <b>{u.pseudo}</b> –ø—Ä–∞–∑–¥–Ω—É–µ—Ç <b>{next_ms} –¥.</b>",
                    parse_mode="HTML",
                    reply_markup=milestone_kb(0)  # placeholder
                )
                await sent.edit_reply_markup(milestone_kb(sent.message_id))
                u.last_checkpoint = next_ms
        await ses.commit()

# ‚îÄ‚îÄ‚îÄ CRON : motivation notifs (p√©riodique par user)
@aiocron.crontab("0 9 * * *")  # Quotidien 9h, filtre par period
async def motivation_notifs():
    async with async_session() as ses:
        users = (await ses.execute(select(User).where(User.notifications_enabled == True))).scalars().all()
        for u in users:
            if u.quit_date and (date.today() - u.quit_date).days % u.notification_period == 0:
                quote = random.choice(QUOTES)
                await bot.send_message(u.telegram_id, quote)

async def handle_webhook(request):
    data = await request.json()
    if data.get("status") == "paid":
        uid = int(data["metadata"]["uid"])
        await bot.add_chat_member(SUPER_GROUP, uid)
        await bot.send_message(uid, "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å ‚Üí /start")
    return web.Response(status=200)

app = web.Application()
app.add_routes([web.post('/webhook', handle_webhook)])

async def start_webhook():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()

async def main():
    asyncio.create_task(start_webhook())  # Optionnel si monet
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())