# handlers/settings.py
"""–ö–æ–º–∞–Ω–¥–∞ /settings : –∏–∑–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º, —ç–º–æ–¥–∑–∏, –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞, –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,
–∞ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

aiogram v3 (Pydantic –º–æ–¥–µ–ª–∏) ‚Üí –í–°–ï –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ InlineKeyboardButton –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ò–ú–ï–ù–û–í–ê–ù–ù–´–ú–ò,
–∏–Ω–∞—á–µ –æ—à–∏–±–∫–∞ ¬´BaseModel.__init__() takes 1 positional argument but 2 were given¬ª.
"""

import re
from datetime import date

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from database.utils import get_user, update_user

settings_router = Router()
PSEUDO_RE = re.compile(r"^(?!/)[^\s]{1,30}$", re.UNICODE)


class SettingsState(StatesGroup):
    pseudo = State()
    emoji = State()
    quit_date = State()
    period = State()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /settings
@settings_router.message(Command("settings"))
async def settings_handler(message: Message) -> None:
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ /start!")

    notif_enabled = getattr(user, "notifications_enabled", True)
    notif_period = getattr(user, "notification_period", 7)

    text = (
        "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
        f"‚Ä¢ –ü—Å–µ–≤–¥–æ–Ω–∏–º: <code>{user.pseudo}</code>\n"
        f"‚Ä¢ –≠–º–æ–¥–∑–∏: {user.avatar_emoji}\n"
        f"‚Ä¢ –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞: {user.quit_date or '‚Äî'}\n"
        f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if notif_enabled else '–í—ã–∫–ª'}\n"
        f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {notif_period} –¥–Ω."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="edit_pseudo")],
            [InlineKeyboardButton(text="üôÇ –≠–º–æ–¥–∑–∏", callback_data="edit_emoji")],
            [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞", callback_data="edit_quit_date")],
            [InlineKeyboardButton(text="üîî –í–∫–ª/–í—ã–∫–ª", callback_data="toggle_notifs")],
            [InlineKeyboardButton(text="‚è∞ –ü–µ—Ä–∏–æ–¥", callback_data="edit_period")],
        ]
    )
    await message.answer(text, reply_markup=kb, parse_mode="HTML")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Å–µ–≤–¥–æ–Ω–∏–º
@settings_router.callback_query(F.data == "edit_pseudo")
async def ask_pseudo(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º (1-30 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(SettingsState.pseudo)
    await cb.answer()


@settings_router.message(SettingsState.pseudo)
async def save_pseudo(msg: Message, state: FSMContext) -> None:
    pseudo = msg.text.strip()
    if not PSEUDO_RE.match(pseudo):
        return await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. 1-30 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")

    await update_user(msg.from_user.id, pseudo=pseudo)
    await msg.answer("‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await state.clear()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —ç–º–æ–¥–∑–∏
EMOJIS = ["üë§", "üòé", "üê∂", "üê±", "ü¶Å", "üê∫"]


@settings_router.callback_query(F.data == "edit_emoji")
async def choose_emoji(cb: CallbackQuery, state: FSMContext) -> None:
    rows = [[InlineKeyboardButton(text=e, callback_data=f"set_emoji:{e}")] for e in EMOJIS]
    await cb.message.edit_text("üôÇ –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
    await cb.answer()


@settings_router.callback_query(F.data.startswith("set_emoji:"))
async def save_emoji(cb: CallbackQuery, state: FSMContext) -> None:
    emoji = cb.data.split(":")[1]
    await update_user(cb.from_user.id, avatar_emoji=emoji)
    await cb.message.edit_text("‚úÖ –≠–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞
@settings_router.callback_query(F.data == "edit_quit_date")
async def ask_date(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.message.answer("üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ 0 ‚Äî —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å:")
    await state.set_state(SettingsState.quit_date)
    await cb.answer()


@settings_router.message(SettingsState.quit_date)
async def save_date(msg: Message, state: FSMContext) -> None:
    raw = msg.text.strip()
    if raw == "0":
        await update_user(msg.from_user.id, quit_date=None)
        await msg.answer("‚úÖ –î–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")
    else:
        try:
            qd = date.fromisoformat(raw)
        except ValueError:
            return await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.")
        await update_user(msg.from_user.id, quit_date=qd)
        await msg.answer("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è on/off
@settings_router.callback_query(F.data == "toggle_notifs")
async def toggle_notifs(cb: CallbackQuery) -> None:
    user = await get_user(cb.from_user.id)
    enabled = not getattr(user, "notifications_enabled", True)
    await update_user(cb.from_user.id, notifications_enabled=enabled)
    await cb.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå'}", show_alert=True)
    await cb.message.delete()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@settings_router.callback_query(F.data == "edit_period")
async def ask_period(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.message.answer("‚è∞ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 7):")
    await state.set_state(SettingsState.period)
    await cb.answer()


@settings_router.message(SettingsState.period)
async def save_period(msg: Message, state: FSMContext) -> None:
    try:
        days = int(msg.text.strip())
        if days < 1:
            raise ValueError
    except ValueError:
        return await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    await update_user(msg.from_user.id, notification_period=days)
    await msg.answer("‚úÖ –ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()