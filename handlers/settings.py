from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.utils import get_user, update_user
from datetime import date

settings_router = Router()

class SettingsState(StatesGroup):
    pseudo = State()
    emoji = State()
    quit_date = State()
    period = State()  # Pas besoin notifs state, toggle direct

@settings_router.message(Command("settings"))
async def settings_handler(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.reply("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ /start!")
        return
    notifs_status = '–í–∫–ª' if user.notifications_enabled else '–í—ã–∫–ª'
    text = f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n- –ü—Å–µ–≤–¥–æ–Ω–∏–º: {user.pseudo}\n- –≠–º–æ–¥–∑–∏: {user.avatar_emoji}\n- –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞: {user.quit_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifs_status}\n- –ü–µ—Ä–∏–æ–¥: {user.notification_period} –¥–Ω–µ–π"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="edit_pseudo")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data="edit_emoji")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞", callback_data="edit_quit_date")],
        [InlineKeyboardButton(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–∫–ª/–í—ã–∫–ª", callback_data="toggle_notifs")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="edit_period")]
    ])
    await message.answer(text, reply_markup=keyboard)

@settings_router.callback_query(F.data == "edit_pseudo")
async def edit_pseudo(query: CallbackQuery, state: FSMContext):
    await query.message.reply("–ù–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º (1-30 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(SettingsState.pseudo)

@settings_router.message(SettingsState.pseudo)
async def save_pseudo(message: Message, state: FSMContext):
    pseudo = message.text.strip()
    if not 1 <= len(pseudo) <= 30:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await update_user(message.from_user.id, pseudo=pseudo)
    await message.reply("–ü—Å–µ–≤–¥–æ–Ω–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω! üéâ")
    await state.clear()

@settings_router.callback_query(F.data == "edit_emoji")
async def edit_emoji(query: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§", callback_data="set_emoji_üë§")],
        [InlineKeyboardButton(text="üê∂", callback_data="set_emoji_üê∂"), InlineKeyboardButton(text="üòé", callback_data="set_emoji_üòé")],
        # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π
    ])
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏:", reply_markup=keyboard)

@settings_router.callback_query(F.data.startswith("set_emoji_"))
async def save_emoji(query: CallbackQuery, state: FSMContext):
    emoji = query.data.split("_")[2]
    await update_user(query.from_user.id, avatar_emoji=emoji)
    await query.message.edit_text("–≠–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª—ë–Ω! üéâ")
    await state.clear()

@settings_router.callback_query(F.data == "edit_quit_date")
async def edit_quit_date(query: CallbackQuery, state: FSMContext):
    await query.message.reply("–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(SettingsState.quit_date)

@settings_router.message(SettingsState.quit_date)
async def save_quit_date(message: Message, state: FSMContext):
    try:
        quit_date = date.fromisoformat(message.text)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ì–ì–ì–ì-–ú–ú-–î–î.")
        return
    await update_user(message.from_user.id, quit_date=quit_date)
    await message.reply("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üìÖ")
    await state.clear()

@settings_router.callback_query(F.data == "toggle_notifs")
async def toggle_notifs(query: CallbackQuery):
    user = await get_user(query.from_user.id)
    new_enabled = not user.notifications_enabled
    await update_user(query.from_user.id, notifications_enabled=new_enabled)
    status = '–≤–∫–ª—é—á–µ–Ω—ã' if new_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'
    await query.message.edit_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}! üîï")

@settings_router.callback_query(F.data == "edit_period")
async def edit_period(query: CallbackQuery, state: FSMContext):
    await query.message.reply("–ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–Ω–µ–π, –Ω–∞–ø—Ä. 7):")
    await state.set_state(SettingsState.period)

@settings_router.message(SettingsState.period)
async def save_period(message: Message, state: FSMContext):
    try:
        period = int(message.text)
        if period < 1:
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await update_user(message.from_user.id, notification_period=period)
    await message.reply("–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω! ‚è∞")
    await state.clear()