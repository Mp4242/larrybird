# handlers/debug.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from datetime import datetime, time, timezone

from config import ADMINS
from database.database import async_session
from database.user import User

debug_router = Router()

class FakePaidState(StatesGroup):
    waiting_for_date = State()

@debug_router.message(F.text == "/fake_paid_until")
async def fake_paid_until_cmd(msg: Message, state: FSMContext):
    # admin-only + do it in DM (so we don't leak anything in the group)
    if msg.from_user.id not in ADMINS:
        return await msg.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    if msg.chat.type != "private":
        return await msg.answer("üëã –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 14.09.2025\n"
                     "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ—Å—Ç–∞–≤—å –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –∏ –∑–∞–ø—É—Å—Ç–∏ /cron_expire –¥–ª—è —Ç–µ—Å—Ç–∞.")
    await state.set_state(FakePaidState.waiting_for_date)

@debug_router.message(FakePaidState.waiting_for_date)
async def fake_paid_until_set(msg: Message, state: FSMContext):
    raw = (msg.text or "").strip()
    try:
        d = datetime.strptime(raw, "%d.%m.%Y").date()
    except ValueError:
        return await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 14.09.2025")

    # store as UTC midnight start-of-day
    paid_until_dt = datetime.combine(d, time(0, 0, 0, tzinfo=timezone.utc))

    async with async_session() as ses:
        user: User | None = await ses.scalar(
            select(User).where(User.telegram_id == msg.from_user.id)
        )
        if not user:
            return await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ /start.")

        user.paid_until = paid_until_dt
        # set membership based on whether it's still active
        user.is_member = paid_until_dt >= datetime.now(timezone.utc)
        await ses.commit()

    await state.clear()

    status = "–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ" if paid_until_dt >= datetime.now(timezone.utc) else "–∏—Å—Ç–µ–∫–ª–∞ ‚õî"
    await msg.answer(
        f"–ì–æ—Ç–æ–≤–æ!\npaid_until = {raw}\n–ü–æ–¥–ø–∏—Å–∫–∞ —Å–µ–π—á–∞—Å: {status}\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –ø–æ—Å—Ç–∞–≤—å –≤—á–µ—Ä–∞ ‚Üí –∑–∞–ø—É—Å—Ç–∏ /cron_expire."
    )
